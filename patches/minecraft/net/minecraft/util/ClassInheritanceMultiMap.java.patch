--- before/net/minecraft/util/ClassInheritanceMultiMap.java
+++ after/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -4,20 +4,17 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.AbstractSet;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+
+import java.util.*;
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> field_181158_a = Sets.newHashSet();
-    private final Map < Class<?>, List<T >> field_180218_a = Maps.newHashMap();
-    private final Set < Class<? >> field_180216_b = Sets.newIdentityHashSet();
+    // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
+    private static final Set < Class<? >> field_181158_a = java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<Class<?>, Boolean>());
+    private final Map < Class<?>, List<T >> field_180218_a = Maps. < Class<?>, List<T >> newHashMap();
+    private final Set < Class<? >> field_180216_b = Sets. < Class<? >> newIdentityHashSet();
     private final Class<T> field_180217_c;
-    private final List<T> field_181745_e = Lists.newArrayList();
+    private final List<T> field_181745_e = Lists.<T>newArrayList();
 
     public ClassInheritanceMultiMap(Class<T> p_i45909_1_)
     {
@@ -63,7 +60,6 @@
         }
     }
 
-    @Override
     public boolean add(T p_add_1_)
     {
         for (Class<?> oclass : this.field_180216_b)
@@ -91,10 +87,9 @@
         }
     }
 
-    @Override
     public boolean remove(Object p_remove_1_)
     {
-        T t = (T)p_remove_1_;
+        T t = (T) p_remove_1_;
         boolean flag = false;
 
         for (Class<?> oclass : this.field_180216_b)
@@ -113,7 +108,6 @@
         return flag;
     }
 
-    @Override
     public boolean contains(Object p_contains_1_)
     {
         return Iterators.contains(this.func_180215_b(p_contains_1_.getClass()).iterator(), p_contains_1_);
@@ -123,31 +117,40 @@
     {
         return new Iterable<S>()
         {
-            @Override
             public Iterator<S> iterator()
             {
-                List<T> list = ClassInheritanceMultiMap.this.field_180218_a.get(ClassInheritanceMultiMap.this.func_181157_b(p_180215_1_));
-
-                if (list == null)
-                {
+                // CatServer start - Optimization from Foamfix
+                Class c = ClassInheritanceMultiMap.this.func_181157_b(p_180215_1_);
+                List<T> list = ClassInheritanceMultiMap.this.field_180218_a.get(c);
+                if (list == null) {
                     return Collections.emptyIterator();
+                } else {
+                    Iterator<T> iterator = list.iterator();
+                    return p_180215_1_ == c ? (Iterator<S>) iterator : Iterators.filter(iterator, p_180215_1_);
+                }
+                // CatServer end
+                /*
+                List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
+
+                if (list == null)
+                {
+                    return Collections.<S>emptyIterator();
                 }
                 else
                 {
                     Iterator<T> iterator = list.iterator();
-                    return Iterators.filter(iterator, p_180215_1_);
+                    return Iterators.filter(iterator, clazz);
                 }
+                */
             }
         };
     }
 
-    @Override
     public Iterator<T> iterator()
     {
-        return (Iterator<T>)(this.field_181745_e.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.field_181745_e.iterator()));
+        return this.field_181745_e.isEmpty() ? Collections.emptyIterator() : this.field_181745_e.iterator();
     }
 
-    @Override
     public int size()
     {
         return this.field_181745_e.size();
